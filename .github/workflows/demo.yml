name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Action
on:
  pull_request:
    branches: 
      - IDC_demo_master

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true


jobs:
  openXLA-DEMO-CI:
    runs-on: IDC_demo_3
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Prepare Conda Environment
        run: |
          set +e
          CONDA_ENV=openxla_preCI_${{ github.event.pull_request.number }}_${{ runner.name }}
          source ${HOME}/miniconda3/bin/activate ${CONDA_ENV}
          if [ $? -ne 0 ]; then
              echo 'conda env does not exist'
              conda create -n ${CONDA_ENV} python=3.10 -y
              conda activate ${CONDA_ENV}
          fi
          pip install jax==0.4.13 jaxlib==0.4.13
          pip install numpy
          conda install libstdcxx-ng==12.2.0 -c conda-forge
          pip install absl-py
          pip list | grep numpy
          pip list | grep jax

      - name: Build openXLA
        run: |
          set +e
          CONDA_ENV=openxla_preCI_${{ github.event.pull_request.number }}_${{ runner.name }}
          source ${HOME}/miniconda3/bin/activate ${CONDA_ENV}
          which bazel
          if [ $? -eq 1 ]; then
            wget https://github.com/bazelbuild/bazel/releases/download/5.3.0/bazel-5.3.0-installer-linux-x86_64.sh
            bash bazel-5.3.0-installer-linux-x86_64.sh --user
          fi
          export PATH=$PATH:/home/sdp/bin
          source /home/sdp/.bazel/bin/bazel-complete.bash
          bazel --version
          pip list | grep numpy
          pip install numpy
          basekit_path=/home/sdp
          complier_path=${basekit_path}/intel_2023.1/oneapi/compiler/latest/linux
          mkl_path=${basekit_path}/intel_2023.1/oneapi/mkl/latest
          cp /home/sdp/openXLA_demoxla_auto_configure_mkl.exp .
          ls
          python --version
          chmod +x ./openXLA_demoxla_auto_configure_mkl.exp
          ./openXLA_demoxla_auto_configure_mkl.exp $complier_path $mkl_path
          bazel clean --expunge --async
          bazel build //xla/tools/pip_package:build_pip_package
          ./bazel-bin/xla/tools/pip_package/build_pip_package ./
          build_result=${PIPESTATUS[0]}
          echo $build_result
          if [ "$build_result" = "0" ];then
              echo "Build successful"
              pip install *.whl
          else
              echo "Build Failed"
              exit 1
          fi
      - name: UT testing
        run: |
          if [[ "${{ runner.name }}" = "pytorch" ]];then
              export ZE_AFFINITY_MASK=0
              echo "export ZE_AFFINITY_MASK=0"
          elif [[ "${{ runner.name }}" = "pytorch_1" ]];then
              export ZE_AFFINITY_MASK=1
              echo "export ZE_AFFINITY_MASK=1"
          elif [[ "${{ runner.name }}" = "pytorch_2" ]];then
              export ZE_AFFINITY_MASK=2
              echo "export ZE_AFFINITY_MASK=2"
          elif [[ "${{ runner.name }}" = "pytorch_3" ]];then
              export ZE_AFFINITY_MASK=3
              echo "export ZE_AFFINITY_MASK=3"
          fi
          CONDA_ENV=openxla_preCI_${{ github.event.pull_request.number }}_${{ runner.name }}
          source ${HOME}/miniconda3/bin/activate ${CONDA_ENV}
          basekit_path=/home/sdp
          source ${basekit_path}/intel_2023.1/oneapi/compiler/latest/env/vars.sh
          source ${basekit_path}/intel_2023.1/oneapi/mkl/latest/env/vars.sh
          folder_path="/home/sdp/xuming/ut"
          pip install absl-py
          # Loop through all Python files in the folder and execute them
          for file in "$folder_path"/*.py; do
                  echo $file
                  if [ -f "$file" ]; then
                  echo "Running $file..."
                  python "$file"
                  if [ ${PIPESTATUS[0]} -eq 0 ]; then
                    echo "run $test_case successfully"
                  else
                      echo "run $test_case failed"
                  fi
                  echo "----------------------------------------"
              fi
          done
